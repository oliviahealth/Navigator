// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  dateCreated  DateTime @default(now())
  dateModified DateTime @updatedAt

  CommunicationLog CommunicationLog[]
  AppointmentLog   AppointmentLog[]
  EnrollmentForm   EnrollmentForm[]
  MediaAppearance  MediaAppearance[]
}

enum CommunicationMethod {
  Phone
  Mail
  In_Person
  Video_Call
  Other
}
enum FollowUpNeeded {
  Yes
  No
}
model CommunicationEntry {
  id                String     @id @default(uuid())
  
  communicationLogId String

  dateTime           DateTime
  method             CommunicationMethod
  organizationPerson String
  purpose            String
  notes              String?
  followUpNeeded     FollowUpNeeded

  communicationLog   CommunicationLog @relation(fields: [communicationLogId], references: [id], onDelete: Cascade)
}
model CommunicationLog {
  id                    String @id @default(uuid())

  User                  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String

  communicationEntries CommunicationEntry[]

  dateCreated           DateTime @default(now())
  dateModified          DateTime @updatedAt
}

model AppointmentEntry {
  id                String     @id @default(uuid())
  
  appointmentLogId  String

  dateTime          DateTime
  who               String
  location          String
  notes             String?

  appointmentLog   AppointmentLog @relation(fields: [appointmentLogId], references: [id], onDelete: Cascade)
}
model AppointmentLog {
  id     String @id @default(uuid())

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  appointmentEntries AppointmentEntry[]

  dateCreated  DateTime @default(now())
  dateModified DateTime @updatedAt
}

model EmergencyContact {
  id                String @id @default(uuid())

  enrollmentFormId  String

  name              String
  relationship      String
  telephone         String
  email             String

  enrollmentForm   EnrollmentForm @relation(fields: [enrollmentFormId], references: [id], onDelete: Cascade)
}
model EnrollmentForm {
  id                String @id @default(uuid())

  User   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String

  firstName         String
  lastName          String
  address           String
  city              String
  state             String
  zip               String
  homePhone         String
  cellPhone         String
  email             String
  dateOfBirth       DateTime
  emergencyContacts EmergencyContact[]
  clientName        String
  clientDate        DateTime
  guardianName      String
  guardianDate      String
  gcMomsName        String
  gcMomsDate        String

  dateCreated  DateTime @default(now())
  dateModified DateTime @updatedAt
}

model MediaAppearance {
  id                   String @id @default(uuid())

  User                 User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String

  participantName      String
  address              String
  participantDate      DateTime
  guardianName         String?
  guardianDate         DateTime?

  dateCreated          DateTime @default(now())
  dateModified          DateTime @updatedAt
}
